#задача1 
Напишите функцию, которая будет принимать в себя тип данных int (число) и
возвращать тип bool, если переданное число является палиндромом.
  
def is_palindrome(number: int) -> bool:
    number_str = str(number)
    return number_str == number_str[::-1]

# Примеры использования:
# print(is_palindrome(10)) # False
# print(is_palindrome(-121)) # False
  
  #задача1.2
  попробуйте решите задачу без приведения int к str.
  
def is_palindrome(number: int) -> bool:
    if number < 0:
        return False

    original_number = number
    reversed_number = 0

    while number > 0:
        digit = number % 10
        reversed_number = reversed_number * 10 + digit
        number //= 10

    return original_number == reversed_number      

  #задача2
Напишите функцию, которая в качестве аргументов принимает массив (list) с числами
и целевое число. Функция должна возвращать индексы элементов, которые в сумме
дают целевое число.
  
  def two_sum(nums: list[int], target: int) -> list[int]:
    # Создаем словарь для хранения чисел и их индексов
    num_to_index = {}

    for index, num in enumerate(nums):
        # Вычисляем дополнение, которое в сумме с текущим числом даст целевое значение
        complement = target - num

        # Проверяем, есть ли дополнение в словаре
        if complement in num_to_index:
            return [num_to_index[complement], index]

        # Если дополнения нет, добавляем текущее число в словарь
        num_to_index[num] = index

    # Если нет подходящих элементов, возвращаем пустой список
    return []

# Примеры использования:
# print(two_sum([3, 2, 4], 6))       # [1, 2]
# print(two_sum([3, 3], 6))          # [0, 1]

